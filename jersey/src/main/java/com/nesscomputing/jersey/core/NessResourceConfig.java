/**
 * Copyright (C) 2012 Ness Computing, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.nesscomputing.jersey.core;

import java.util.List;
import java.util.Set;

import com.google.common.collect.Lists;
import com.google.inject.Inject;
import com.sun.jersey.api.core.DefaultResourceConfig;
import com.sun.jersey.spi.container.ContainerRequestFilter;
import com.sun.jersey.spi.container.ContainerResponseFilter;
import com.sun.jersey.spi.container.ResourceFilterFactory;

/**
 * A {@link DefaultResourceConfig}, which overrides the various filters with the filters generated by Guice. Therefore it is possible to bind
 * arbitrary request, response and resource filters in Guice and have them hooked up automatically to Jersey.
 */
public class NessResourceConfig extends DefaultResourceConfig
{
    private final List<ContainerRequestFilter> requestFilters = Lists.newArrayList();
    private final List<ContainerResponseFilter> responseFilters = Lists.newArrayList();
    private final List<ResourceFilterFactory> resourceFilterFactories = Lists.newArrayList();

    @Inject(optional=true)
    void addResourceFilters(final Set<ResourceFilterFactory> resourceFilterFactories)
    {
        this.resourceFilterFactories.addAll(resourceFilterFactories);
    }

    @Inject(optional=true)
    void addRequestFilters(final Set<ContainerRequestFilter> requestFilters)
    {
        this.requestFilters.addAll(requestFilters);
    }

    @Inject(optional=true)
    void addResponseFilters(final Set<ContainerResponseFilter> responseFilters)
    {
        this.responseFilters.addAll(responseFilters);
    }

    @Override
    public List<?> getResourceFilterFactories()
    {
        return resourceFilterFactories;
    }

    @Override
    public List<?> getContainerRequestFilters()
    {
        return requestFilters;
    }

    @Override
    public List<?> getContainerResponseFilters()
    {
        return responseFilters;
    }
}
